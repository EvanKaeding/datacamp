{
    "collab_server" : "",
    "contents" : "## Logistic Regression\n\ndownload.file(url = \"https://assets.datacamp.com/production/course_2906/datasets/donors.csv\", \n              destfile = \"donors.csv\", method = \"curl\")\n\ndonors <- read.csv(\"donors.csv\", stringsAsFactors = TRUE)\n\n## Building a basic model\n\n# Examine the dataset to identify potential independent variables\nstr(donors)\n\n# Explore the dependent variable\ntable(donors$donated)\n\n# Build the donation model\n\ndonation_model <- glm(donated ~ bad_address + interest_religion + interest_veterans, \n                      data = donors, family = \"binomial\")\n\n# Summarize the model results\n\nsummary(donation_model)\n\n## Using the model to predict the liklihood of donations occuring\n\n# Estimate the donation probability\ndonors$donation_prob <- predict(donation_model, type = \"response\")\n\n# Find the donation probability of the average prospect\nmean(donors$donated)\n\n# Predict a donation if probability of donation is greater than average (0.0504)\n\ndonors$donation_pred <- ifelse(donors$donation_prob > 0.0504, 1, 0)\n\n# Calculate the model's accuracy\nmean(donors$donated == donors$donation_pred)\n\n# Calculate the accuracy of a model that predicts that nobody donates\n\nmean(donors$donated == 0)\n\n## Creating and ploting an ROC curve\n\n# Load the pROC package\n\nlibrary(pROC)\n\n# Create a ROC curve by creating an ROC object and comparing the donations to probablities\n\nROC <- roc(donors$donated, donors$donation_prob)\n\n# Plot the ROC curve\nplot(ROC, col = \"blue\")\n\n# Calculate the area under the curve (AUC)\nauc(ROC)\n\n## Coding variables as categoricals\n\n# Convert the wealth rating to a factor\n\ndonors$wealth_rating <- factor(donors$wealth_rating, \n                               levels = c(0, 1, 2, 3), \n                               labels = c(\"Unknown\", \"Low\", \"Medium\", \"High\"))\n\n# Use relevel() to change reference category\n\ndonors$wealth_rating <- relevel(donors$wealth_rating, ref = \"Medium\")\n\n# Build the model with the new variable\n\nsummary(glm(donated ~ wealth_rating, data = donors, family = \"binomial\"))\n\n## Mean imputing missing values\n\n# Find the average age among non-missing values\n\nsummary(donors$age)\n\n# Impute missing age values with mean(age)\n\ndonors$imputed_age <- ifelse(is.na(donors$age), 61.65, donors$age)\n\n# Create missing value indicator for age\n\ndonors$missing_age <- ifelse(is.na(donors$age), 1, 0)\n\n## Build a recency, frequency, and money (RFM) model\n\nrfm_model <- glm(donated ~ money + recency * frequency, data = donors, family = \"binomial\")\n\n# Summarize the RFM model to see how the parameters were coded\n\nsummary(rfm_model)\n\n# Compute predicted probabilities for the RFM model\n\nrfm_prob <- predict(rfm_model, type = \"response\")\n\n# Plot the ROC curve and find AUC for the new model\n\nlibrary(pROC)\n\nROC <- roc(donors$donated, rfm_prob)\n\nplot(ROC, col = \"red\")\n\nauc(ROC)\n\n## Finally, we'll use Stepwise regression to find pick our predictors\n\n# Specify a null model with no predictors\n\nnull_model <- glm(donated ~ 1, data = donors, family = \"binomial\")\n\n# Specify the full model using all of the potential predictors\n\nfull_model <- glm(donated ~ ., data = donors, family = \"binomial\")\n\n# Use a forward stepwise algorithm to build a parsimonious model\n\nstep_model <- step(null_model, \n                   scope = list(lower = null_model, upper = full_model), \n                   direction = \"forward\")\n\n# Estimate the stepwise donation probability\n\nstep_prob <- predict(step_model, type = \"response\")\n\n# Plot the ROC of the stepwise model\n\nlibrary(pROC)\n\nROC <- roc(donors$donated, step_prob)\n\nplot(ROC, col = \"red\")\n\nauc(ROC)\n\n# Stepwise selection is done using the AIC criteria. Learn more here:\n# https://en.wikipedia.org/wiki/Akaike_information_criterion\n",
    "created" : 1512247188316.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "385854270",
    "id" : "51E15C39",
    "lastKnownWriteTime" : 1514580263,
    "last_content_update" : 1514580263827,
    "path" : "~/Projects/datacamp/supervised-learning-in-r/logistic-regression.R",
    "project_path" : "logistic-regression.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}